

//Select version (1 = one round in encryption direction, 2 = two rounds)
version := 2;


N := 29;

//r number of total rounds
r := Ceiling(N/Log(2,3));

//T is the degree of 1 decryption round
T := (2^(N+1)-1)/3;
T := IntegerRing() ! T;

K := GF(2,N);

Key := Random(K);

//Creates the round constants
Const := [* 0 *];
for i in [1.. r -1] do 
	Append(~Const,Random(K));
end for;
Append(~Const,0);

R<X> := PolynomialRing(K);


//Note: In the decryption direction we define one round to include the addition of a key variable
function DecryptMimc(C,r1)
	
	
	for i in [1.. r1] do
		C := (C + Key + Const[r + 2 -i])^T;
	end for;
	
	
	return C + Key + Const[r + 2 - r1 -1];
	
end function;

function EncryptMimc(C,r1)


	for i in [1.. r1] do
		C := (C + Key + Const[i])^3;
	end for;
		
	//In encryption direction, only add the last step when full encryption
	if r eq r1 then
		D := C + Key;
	else
		D := C;
	end if;
	
	return D;
	
end function;

//---------------------------------------------------------------------------------------------


//If-statement to differ the versions of the attack:
if version eq 1 then

function MakeCoeff1Round()
//Runs over the 2^(N-1) elements having 0*\alpha^{N-1}, where \alpha is a primitive element
	
	P := 0;
	P3 := 0;
	for i in [0.. 2^(N-1)-1] do
	
		a := Intseq(i,2);
		while #a lt N do;
			Append(~a, 0);
		end while;
		
		temp := DecryptMimc(elt<K | a>,r);
		P := P + temp;
		P3 := P3 + temp^3;
		
	end for;
	
	return [P,P3];

end function;
		
H := MakeCoeff1Round();

UnivPoly := H[1]*X^2 + (H[1])^2*X + H[2];

Roots(UnivPoly);
Key;

elif version eq 2 then

//function for 2 rounds in encryption direction
function MakeCoeff2Round()
//Runs over the 2^(N-1) elements having 0*\alpha^{N-1}, where \alpha is a primitive element
	
	P := 0;
	P3 := 0;
	P9 := 0;
	for i in [0.. 2^(N-1)-1] do
	
		a := Intseq(i,2);
		while #a lt N do;
			Append(~a, 0);
		end while;
		
		temp := DecryptMimc(elt<K | a>,r);
		P := P + temp;
		temp := temp^3;
		P3 := P3 + temp;
		temp2 := temp^2;
		P9 := P9 + temp*temp2;
		
	end for;
	
	return [P,P3,P9];

end function;
		
H := MakeCoeff2Round();

UnivPoly := H[1]*(X^8 + X^4 + X^2*Const[2]^2) + (H[1])^2*(X^5 + X^4*Const[2] + X^3 + X*Const[2]^2)
+ (H[1])^4*(X^3 + X^2*Const[2]) + (H[1])^8*X + H[2]*(X^2 + Const[2]^2) + (H[2])^2*(X + Const[2]) + H[3];

Roots(UnivPoly);
Key;



else

	print "Wrong input in version.";

end if;
